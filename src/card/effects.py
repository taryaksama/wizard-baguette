# src/card/effects.py
# author: @taryaksama

"""
All code related to the class Effects()
Defines the effects generated by a of Magic: the Gathring printed card
Reads the text of the card
"""

import re
from typing import List, Dict

def word_check_decorator(words: List[str]):
    def decorator(func):
        def wrapper(self):
            for word in words:
                if word in self.card_text.lower():
                    return True
            return False
        return wrapper
    return decorator

def pattern_check_decorator(pattern: str):
    def decorator(func):
        def wrapper(self):
            return bool(re.search(pattern, self.card_text, re.IGNORECASE | re.DOTALL))
        return wrapper
    return decorator

class Effects():
    def __init__(self, card_text: str):
        self.card_text = card_text

    @pattern_check_decorator(r'creat(e|es) .*? creature token')
    def creates_token(self) -> bool:
        pass

    @pattern_check_decorator(r'when .*? ente(r|rs)')
    def is_ETB(self) -> bool:
        pass
    
    @classmethod
    def generate_word_check_methods(cls, method_dict: Dict[str, List[str]]):
        for method_name, words in word_check_method_dict.items():
            method = word_check_decorator(words)(lambda self: None)
            # Set the method name and add it to the class
            setattr(cls, method_name, method)

# Dictionary mapping method names to lists of words
word_check_method_dict = {
    "is_targeting": ["target", "choose", "select"],
    "is_damage": ["deals", "damage"],
    "is_counter": ["counter"],
    "is_removal": ["destroy", "exile", "remove"],
    "is_sacrifice": ["sacrifice"],
    "is_discard": ["discard"],
    "is_draw": ["draw"],
    "is_tutor": ["search"]
}

Effects.generate_word_check_methods(word_check_method_dict)
#generate_word_check_methods(word_check_method_dict)

def main():
    ...

if __name__ == '__main__':
    main()