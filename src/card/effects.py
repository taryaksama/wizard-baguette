# src/card/effects.py
# author: @taryaksama

"""
All code related to the class Effects()
Defines the effects generated by a of Magic: the Gathring printed card
Reads the text of the card
"""

import re
from typing import List, Dict

def word_check_decorator(words: List[str]):
    def decorator(func):
        def wrapper(self):
            for word in words:
                if word in self.card_text:
                    return True
            return False
        return wrapper
    return decorator

def pattern_check_decorator(patterns: List[str]):
    def decorator(func):
        def wrapper(self):
            for pattern in patterns:
                if bool(re.search(pattern, self.card_text, re.IGNORECASE | re.DOTALL)):
                    return True
            return False
        return wrapper
    return decorator

class Effects():
    def __init__(self, card_text: str):
        self.card_text = card_text.lower()
    
    @classmethod
    def generate_pattern_check_methods(cls, method_dict: Dict[str, List[str]]):
        for method_name, patterns in method_dict.items():
            method = pattern_check_decorator(patterns)(lambda self: None)
            setattr(cls, method_name, method)

    @classmethod
    def generate_word_check_methods(cls, method_dict: Dict[str, List[str]]):
        for method_name, words in method_dict.items():
            method = word_check_decorator(words)(lambda self: None)
            setattr(cls, method_name, method)

# Dictionary mapping method names to lists of words to checks
word_check_method_dict = {
    "is_targeting": ["target", "choose", "select"],
    "is_damage": ["deals", "damage"],
    "is_counter": ["counter"],
    "is_removal": ["destroy", "exile", "remove"],
    "is_sacrifice": ["sacrifice"],
    "is_discard": ["discard"],
    "is_draw": ["draw"],
    "is_tutor": ["search"]
}
Effects.generate_word_check_methods(word_check_method_dict)

# Dictionary mapping method names to lists of text patterns to checks
pattern_check_method_dict = {
    "is_ETB": [r"when .*? ente(r|rs)"],
    "creates_token": [r"creat(e|es) .*? creature token"],
    "produces_mana": [r"add (?:\d+|one|two|three|four|five) mana", r"add {"]
}
Effects.generate_pattern_check_methods(pattern_check_method_dict)

def main():
    ...

if __name__ == '__main__':
    main()